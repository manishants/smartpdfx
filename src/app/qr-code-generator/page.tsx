
"use client";

import { useState } from 'react';
import Image from "next/image";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { FileDown, QrCode } from "lucide-react";
import { useToast } from '@/hooks/use-toast';
import { generateQrCode } from '@/lib/actions/generate-qr-code';
import type { GenerateQrCodeInput, GenerateQrCodeOutput } from '@/lib/types';
import { AllTools } from '@/components/all-tools';
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion';
import { ToolSections } from '@/components/tool-sections';
import { getCustomToolSections } from '@/lib/tool-sections-config';

const FAQ = () => (
    <div className="mt-12">
        <h2 className="text-2xl font-bold text-center mb-6">Frequently Asked Questions</h2>
        <Accordion type="single" collapsible className="w-full">
            <AccordionItem value="item-1">
                <AccordionTrigger>What can I put in a QR code?</AccordionTrigger>
                <AccordionContent>
                    You can encode almost any text-based information. This is most commonly used for website URLs, but you can also use it for contact information (vCards), Wi-Fi network credentials, calendar events, email addresses, phone numbers, or just plain text.
                </AccordionContent>
            </AccordionItem>
            <AccordionItem value="item-2">
                <AccordionTrigger>Do the QR codes expire?</AccordionTrigger>
                <AccordionContent>
                   No, the QR codes generated by this tool do not expire. They are static, meaning the information you encode into them is permanent. As long as the data (like the website URL) is valid, the QR code will work forever.
                </AccordionContent>
            </AccordionItem>
        </Accordion>
    </div>
);


export default function QrCodeGeneratorPage() {
  const [text, setText] = useState('');
  const [result, setResult] = useState<GenerateQrCodeOutput | null>(null);
  const { toast } = useToast();

  const handleGenerate = async () => {
    if (!text) {
      toast({ title: "No text provided", description: "Please enter text or a URL to generate a QR code.", variant: "destructive" });
      return;
    }
    
    try {
      const input: GenerateQrCodeInput = { text };
      const genResult = await generateQrCode(input);
      
      if (genResult && genResult.qrCodeImageUri) {
        setResult(genResult);
      } else {
        throw new Error("Generation returned no data.");
      }
    } catch (error: any) {
      console.error("Generation failed:", error);
      toast({
        title: "Generation Failed",
        description: error.message || "An unknown error occurred.",
        variant: "destructive"
      });
    }
  };

  const handleDownload = () => {
    if (result) {
      const a = document.createElement('a');
      a.href = result.qrCodeImageUri;
      a.download = "qrcode.png";
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
    }
  };

  return (
    <>
    <div className="px-4 py-8 md:py-12">
      <header className="text-center">
        <h1 className="text-4xl font-bold font-headline">QR Code Generator</h1>
        <p className="text-lg text-muted-foreground mt-2">
          Create a QR code from any text or URL.
        </p>
      </header>
      
      <div className="max-w-xl mx-auto mt-8">
        <Card>
          <CardContent className="p-6 space-y-4">
                <div className="space-y-2">
                    <Label htmlFor="text-input">Text or URL</Label>
                    <Input 
                        id="text-input" 
                        value={text} 
                        onChange={(e) => setText(e.target.value)} 
                        placeholder="e.g., https://example.com"
                    />
                </div>
                <Button className="w-full" onClick={handleGenerate}>
                    <QrCode className="mr-2"/> Generate QR Code
                </Button>
          </CardContent>
        </Card>

        {result && (
            <Card className="mt-6">
                 <CardHeader>
                    <CardTitle className="text-center">Your QR Code</CardTitle>
                </CardHeader>
                <CardContent className="flex flex-col items-center gap-4">
                    <div className="p-4 bg-white rounded-lg border">
                         <Image
                            src={result.qrCodeImageUri}
                            alt="Generated QR Code"
                            width={256}
                            height={256}
                         />
                    </div>
                    <Button onClick={handleDownload}>
                        <FileDown className="mr-2"/> Download .png
                    </Button>
                </CardContent>
            </Card>
        )}
        
        <ToolSections 
          toolName="QR Code Generation" 
          sections={getCustomToolSections("QR Code Generation")} 
        />
        
        <FAQ />
      </div>
    </div>
    <AllTools />
    </>
  );
}
